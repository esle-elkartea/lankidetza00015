
package net.idtoki.adimde.model;


import java.util.logging.Logger;

import net.idtoki.adimde.manager.ProductosManager;
import net.zylk.tools.format.FormatUtils;

import org.apache.torque.TorqueException;
import org.apache.torque.om.Persistent;

import com.workingdogs.village.DataSetException;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Mon Oct 02 10:34:00 CEST 2006]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 */
public  class Productos
    extends net.idtoki.adimde.model.BaseProductos
    implements Persistent
{

private static final Logger logger = Logger.getLogger("net.idtoki.adimde.model.Productos");


		
	public String getIdproductoProductosParsed()
	{
		return FormatUtils.genericParsedStr(this.getIdproducto() + "");
	}					

		
	public String getIdproduccionProductosParsed()
	{
		String strFK=null;
		try
		{
			strFK=this.getProducciones().getULContentProduccionesParsed();
		}
		catch (TorqueException te) {
			logger.severe("No se ha podido localizar Producciones. getIdproduccionProductosParsed()" );
			te.printStackTrace();
		}
		return FormatUtils.genericParsedStr(strFK);		
	}									

		
	public String getFechaProductosParsed()
	{
		return FormatUtils.genericParsedStr(FormatUtils.aaaammdd2ddmmaaaa(this.getFecha(),"-"));		
	}					

		
	public String getReferenciaProductosParsed()
	{
		return FormatUtils.genericParsedStr(this.getReferencia());		
	}					

		
	public String getAlmacenProductosParsed()
	{
		return FormatUtils.genericParsedStr(this.getAlmacen());		
	}					


	public String getPathProductosParsed(String strQueryString) throws TorqueException
	{	
	  String a = "";
	  if (strQueryString.indexOf("producciones") != -1)	  
	  	a = a + this.getProducciones().getPathProduccionesParsed(strQueryString) + "/";
	  a = a + this.getReferenciaProductosParsed();  
	  return a;
	}

	public String getULContentProductosParsed() throws TorqueException
	{
		return FormatUtils.genericParsedStr(this.getIdproducto() + "-" + this.getReferenciaProductosParsed());	
	}	

	public String getHijosComposicionesProductos()
	{
		return "<a href='#' class='hijos' id='getHijosComposicionesProductos" + this.getIdproducto() + "' title='Composiciones'>&#160;&#160;&#160;&#160;</a>";
	}
	public String getHijosPartesProductos()
	{
		return "<a href='#' class='hijos' id='getHijosPartesProductos" + this.getIdproducto() + "' title='Partes'>&#160;&#160;&#160;&#160;</a>";
	}
	
	public String getDeleteProductos()
	{
		return "<a href='#' class='eliminar' id='getDeleteProductos" + this.getIdproducto() + "' title='Borrar'>&#160;&#160;&#160;&#160;</a>";
	}	
	public String getEditProductos()
	{
		return "<a href='#' class='edicion' id='getEditProductos" + this.getIdproducto() + "' title='Editar'>&#160;&#160;&#160;&#160;</a>";
	}

	public String getCosteMaterialesProductosParsed() throws TorqueException,DataSetException
	{
		double coste = ProductosManager.getCosteMaterialesProductos(this.getIdproducto());
		return coste+"";
	}	
	
	public String getManoObraProductosParsed() throws TorqueException,DataSetException
	{
		double mo = ProductosManager.getManoObraProductos(this.getIdproducto());
		return mo+"";
	}	
	
}
