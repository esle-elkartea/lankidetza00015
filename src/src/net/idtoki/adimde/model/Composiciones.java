
package net.idtoki.adimde.model;


import java.util.logging.Logger;

import net.zylk.tools.format.FormatUtils;

import org.apache.torque.TorqueException;
import org.apache.torque.om.Persistent;

import com.workingdogs.village.DataSetException;

import net.idtoki.adimde.manager.ComposicionesManager;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Mon Oct 02 10:34:00 CEST 2006]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 */
public  class Composiciones
    extends net.idtoki.adimde.model.BaseComposiciones
    implements Persistent
{

private static final Logger logger = Logger.getLogger("net.idtoki.adimde.model.Composiciones");


		
	public String getIdcomposicionComposicionesParsed()
	{
		return FormatUtils.genericParsedStr(this.getIdcomposicion() + "");
	}					

		
	public String getIdmaterialComposicionesParsed()
	{
		String strFK=null;
		try
		{
			strFK=this.getMateriales().getULContentMaterialesParsed();
		}
		catch (TorqueException te) {
			logger.severe("No se ha podido localizar Materiales. getIdmaterialComposicionesParsed()" );
			te.printStackTrace();
		}
		return FormatUtils.genericParsedStr(strFK);		
	}					

		
	public String getIdproductoComposicionesParsed()
	{
		String strFK=null;
		try
		{
			strFK=this.getProductos().getULContentProductosParsed();
		}
		catch (TorqueException te) {
			logger.severe("No se ha podido localizar Productos. getIdproductoComposicionesParsed()" );
			te.printStackTrace();
		}
		return FormatUtils.genericParsedStr(strFK);		
	}					

		
	public String getUnidadesComposicionesParsed()
	{
		return FormatUtils.genericParsedStr(this.getUnidades() + "");	 
	}					


	public String getPathComposicionesParsed(String strQueryString) throws TorqueException
	{	
	  String a = "";
	  if (strQueryString.indexOf("materiales") != -1)	  
	  	a = a + this.getMateriales().getPathMaterialesParsed(strQueryString) + "/";
	  if (strQueryString.indexOf("productos") != -1)	  
	  	a = a + this.getProductos().getPathProductosParsed(strQueryString) + "/";
	  a = a + this.getProductos().getReferenciaProductosParsed() + "_" + this.getMateriales().getNombreMaterialesParsed();  
	  return a;
	}

	public String getULContentComposicionesParsed() throws TorqueException
	{
		return FormatUtils.genericParsedStr(this.getIdcomposicion() + "-" + this.getProductos().getReferenciaProductosParsed() + "_" + this.getMateriales().getNombreMaterialesParsed());	
	}	

	
	public String getDeleteComposiciones()
	{
		return "<a href='#' class='eliminar' id='getDeleteComposiciones" + this.getIdcomposicion() + "' title='Borrar'>&#160;&#160;&#160;&#160;</a>";
	}	
	public String getEditComposiciones()
	{
		return "<a href='#' class='edicion' id='getEditComposiciones" + this.getIdcomposicion() + "' title='Editar'>&#160;&#160;&#160;&#160;</a>";
	}

	public String getCosteMaterialesComposicionesParsed() throws TorqueException,DataSetException
	{
		double coste = ComposicionesManager.getCosteMaterialesComposiciones(this.getIdcomposicion());
		return coste+"";
	}
	
}
