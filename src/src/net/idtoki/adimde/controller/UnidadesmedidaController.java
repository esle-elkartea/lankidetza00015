package net.idtoki.adimde.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

import net.idtoki.adimde.manager.UnidadesmedidaManager;
import net.idtoki.adimde.group.UnidadesmedidaGroupBean;
import net.idtoki.adimde.helper.UnidadesmedidaHelper;
import net.idtoki.adimde.model.UnidadesmedidaPeer;
import net.idtoki.adimde.model.Unidadesmedida;


import net.idtoki.adimde.helper.MaterialesHelper;


import net.zylk.tools.ajax.AjaxUtils;
import net.zylk.tools.ajax.AjaxUtils.DinamicGridBean;
import net.zylk.tools.format.FormatUtils;
import net.zylk.tools.pdf.PdfUtils;
import net.zylk.tools.xml.XmlUtils;
import net.zylk.torque.TorqueUtils;
import net.zylk.web.WebUtils;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Thu Oct 26 17:10:22 CEST 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
 
 
public class UnidadesmedidaController
    extends net.idtoki.adimde.controller.BaseUnidadesmedidaController
{
 private static final Logger logger = Logger.getLogger("net.idtoki.adimde.controller.UnidadesmedidaController");
 private TransformerFactory tFactory = TransformerFactory.newInstance();
 private Transformer unidadesmedida_transformer = null;  
 private Transformer unidadesmedidas_transformer = null; 

 public void init(ServletConfig config)
 {
	super.init();
	ResourceBundle resource = ResourceBundle.getBundle("net/idtoki/adimde/app/config/app-config");
	File unidadesmedida = new File(resource.getString("app.xsl.templates.dir")+"/PdfUnidadesmedida.xslt");
	Source xslSource = new StreamSource(unidadesmedida);
	File unidadesmedidas = new File(resource.getString("app.xsl.templates.dir")+"/PdfListaUnidadesmedida.xslt");
	Source xslSourceT = new StreamSource(unidadesmedidas); 	  
	try{
		unidadesmedida_transformer = tFactory.newTransformer(xslSource);
		unidadesmedidas_transformer = tFactory.newTransformer(xslSourceT);			  
	}catch (Exception e){
	  e.printStackTrace();
	}
 }


//Función para la inserción/actualización de registros

public void serviceAddUnidadesmedida(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 //Con esto se consigue transformar el request a UTF
	 //para temas de acentos y otros caracteres
	 utf8RequestService(request);

	 //recojo los parametros del formulario y doy de alta un nuevo elmento
	 try
	 {
		 Unidadesmedida elUnidadesmedida = UnidadesmedidaHelper.createObj(request);
		 UnidadesmedidaGroupBean gbUnidadesmedida = new UnidadesmedidaGroupBean();
		 gbUnidadesmedida.setElemento(elUnidadesmedida);
		 gbUnidadesmedida.save();
	 }
	 catch(TorqueException te)
	 {
		 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	 }
 }


//Función para la eliminación de un registro
//este método invoca al método public void deleteUnidadesmedida(int idBorrar)
//definido en el UnidadesmedidaManager
 public void serviceDeleteUnidadesmedida(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 int idBorrar=-1;
	 idBorrar=WebUtils.getintParam(request, "borrarId");
	 if (idBorrar!=-1)
 		 if (UnidadesmedidaManager.borraUnidadesmedida(idBorrar))
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlOKResponse("ISO-8859-1"));
		 else
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlNotOKResponse("ISO-8859-1"));			 
 }


// Funciones para las ordenaciones y filtrados de información

 private Criteria ordenacion(Criteria c,String CampoOrdenacion,String OrdenOrdenacion) 
 { 
 	if((OrdenOrdenacion != null )&& (OrdenOrdenacion.compareTo("ASC")==0))
 		if ((CampoOrdenacion != null))
 		{
 			c.addAscendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	if  ((OrdenOrdenacion != null) && (OrdenOrdenacion.compareTo("DESC")==0))
 		if ((CampoOrdenacion != null))
		{
 			c.addDescendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	return c;
 }

private Criteria filtro(Criteria c,int filtro) 
{ 
	String cadena = null;
	 switch (filtro)
	 {
	 case 1:
		  //Caso uno de Filtrado
		  //c.add(Campo,valor);
		  break;
	 case 2:
		  //Caso dos de Filtrado
		  //c.add(Campo,valor);
		  break;
	 default:
		 //caso por defecto
		 break;
	 }
	return c;
}

 public StringBuffer replaceStringBuffer (StringBuffer strBA, String strOrigen, String strDestino) 
 {
	 return new StringBuffer(strBA.toString().replaceAll(strOrigen,strDestino));
 }

 private Criteria criteriaUnidadesmedidaTableContent(HttpServletRequest request,Criteria c) throws IOException, ServletException
 {
 	String param = "";	 
	  String paramSortCol =  WebUtils.getStringParam(request, "sort_col");
	  String paramSortDir =  WebUtils.getStringParam(request, "sort_dir");
	  int paramFiltro =  WebUtils.getintParam(request, "filtro");
	  c = ordenacion(c,paramSortCol,paramSortDir);
	  c = filtro(c,paramFiltro);

 	  return c;
 } 
 
 public String getPathElementUnidadesmedida(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
	 Criteria c= new Criteria();
	 String strPath = "";
	 int claveId=-1;
	 int claveFkId=-1;	 
	 claveId=WebUtils.getintParam(request, "unidadesmedida.IDUNIDADMEDIDA");
	 if (claveId!=-1)
	 {
		c.add(UnidadesmedidaPeer.IDUNIDADMEDIDA, claveId);
		UnidadesmedidaGroupBean trgb = UnidadesmedidaManager.getUnidadesmedidas(c);							
		strPath = trgb.getUnidadesmedida(0).getPathUnidadesmedidaParsed(request.getQueryString());
	 }
	 return "<path>" + strPath + "</path>";
 } 
 
 public String getPathTableContentUnidadesmedida(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
	 Criteria c= new Criteria();
	 String strPath = "";
	 int claveId=-1;	 
	 return "<path>" + strPath + "</path>";
 }  


public void  serviceUnidadesmedidaTableContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
	 utf8RequestService(request);
	 int numElemPedidosBD = 40;
	 int gap = 0;//gap = viewedRows - numElemVisiblesUltPag	  
	 DinamicGridBean dgb = WebUtils.getDinamicGridBeanParam(request,numElemPedidosBD,gap); 
	 Criteria c =UnidadesmedidaManager.buildSearchCriteria(dgb);
	 c =criteriaUnidadesmedidaTableContent(request,c);	 
	 UnidadesmedidaGroupBean cgb = UnidadesmedidaManager.getUnidadesmedidas(c);
	 dgb.setTotalSize(cgb.getTotalSize());
	  
	 String[] methodos= new String[] {
		UnidadesmedidaHelper.DESCRIPCION_GET_METHOD_NAME+"UnidadesmedidaParsed"
		,"getHijosMaterialesUnidadesmedida"
		,"getEditUnidadesmedida"
		,"getDeleteUnidadesmedida"
	};
	 
	 StringBuffer cadena=null;
	 cadena = AjaxUtils.buildXmlAjaxResponseTableContentFromListObj(cgb.getAlmacen(),methodos,UnidadesmedidaHelper.IDUNIDADMEDIDA_GET_METHOD_NAME, dgb,"ISO-8859-1"); 
	 cadena.insert(cadena.indexOf("</ajax-response>"),"<response type='object' id='divPath'>" + getPathTableContentUnidadesmedida(request,response) + "</response>");
	 xmlResponseService(response,cadena); 
 }  

 public void serviceUnidadesmedidaUlContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] methodos= new String[] {
	 		"getULContentUnidadesmedidaParsed"
			 };
	 String param =  WebUtils.getStringParam(request, "value");
	 if(param==null || param.length() <= 0)
		 param =  WebUtils.getStringParam(request, new MaterialesHelper().getIdunidadmedidaName());
	 	 
	 UnidadesmedidaGroupBean mgb = UnidadesmedidaManager.getUnidadesmedidas(UnidadesmedidaManager.buildSearchCriteria(param));
	 simpleResponseService(response, AjaxUtils.buildAjaxULContentFromListObj(mgb.getAlmacen(),methodos, UnidadesmedidaHelper.COMPLEX_ID_GET_METHOD,"Unidadesmedida"));
 } 



 public void serviceUnidadesmedidaElement(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
  StringBuffer cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "unidadesmedida.IDUNIDADMEDIDA");
  if (claveId!=-1)
  {
	  c.add(UnidadesmedidaPeer.IDUNIDADMEDIDA, claveId);
  }
  c.addAscendingOrderByColumn(UnidadesmedidaPeer.IDUNIDADMEDIDA);
  UnidadesmedidaGroupBean trgb = UnidadesmedidaManager.getUnidadesmedidas(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  String [] parametros={
		UnidadesmedidaHelper.IDUNIDADMEDIDA_GET_METHOD_NAME
		,UnidadesmedidaHelper.DESCRIPCION_GET_METHOD_NAME+"UnidadesmedidaParsed"
	  };
	  cadena=trgb.buildXml(parametros,null,"ISO-8859-1");	
	  cadena.insert(cadena.indexOf("</result>"),getPathElementUnidadesmedida(request,response));  
  }
  xmlResponseService(response, cadena);
 } 
 

 protected StringBuffer updateIdunidadmedidaResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(UnidadesmedidaManager.getUnidadesmedida(Integer.parseInt(a.get(0).toString())).getIdunidadmedidaUnidadesmedidaParsed());
 }  
 

 protected StringBuffer updateDescripcionResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(UnidadesmedidaManager.getUnidadesmedida(Integer.parseInt(a.get(0).toString())).getDescripcionUnidadesmedidaParsed());
 }  
 
 

 public void serviceGetUnidadesmedidaDetallePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
		UnidadesmedidaHelper.IDUNIDADMEDIDA_GET_METHOD_NAME
		,UnidadesmedidaHelper.DESCRIPCION_GET_METHOD_NAME+"UnidadesmedidaParsed"
			 };
	  
	 
	 UnidadesmedidaGroupBean tgb = new UnidadesmedidaGroupBean();
	 try
	{
		tgb.setElemento(UnidadesmedidaHelper.getUnidadesmedida(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, null,"ISO-8859-1"),"n/a"," "), unidadesmedida_transformer,"ISO-8859-1");
	 response.addHeader("content-disposition","attachment;filename=Unidadesmedida.pdf");
	 response.setContentType("application/pdf");
	 response.setHeader("Cache-Control", "");//para que funcione en IE
	 response.setContentLength(content.length);
	 response.getOutputStream().write(content);
	 response.getOutputStream().flush();  
	 response.getOutputStream().close();
	
 }  

 public void serviceUnidadesmedidaTableContentPdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  	utf8RequestService(request);
  	Criteria c= new Criteria();
  	String paramQuery =  WebUtils.getStringParam(request, "query");
  	if ((paramQuery != null)&& (paramQuery.compareTo("")!=0) )
		c = UnidadesmedidaManager.buildSearchCriteria(paramQuery);   
  	c =criteriaUnidadesmedidaTableContent(request,c);	  
  	UnidadesmedidaGroupBean tgb = UnidadesmedidaManager.getUnidadesmedidas(c);
  
  	String[] methodos= new String[] {	
		UnidadesmedidaHelper.DESCRIPCION_GET_METHOD_NAME+"UnidadesmedidaParsed"
			};
  
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(methodos, null,"ISO-8859-1"),"n/a"," "), unidadesmedidas_transformer,"ISO-8859-1");
	 response.addHeader("content-disposition","attachment;filename=ListaUnidadesmedida.pdf");
	 response.setContentType("application/pdf");
	 response.setHeader("Cache-Control", "");//para que funcione en IE
	 response.setContentLength(content.length);
	 response.getOutputStream().write(content);
	 response.getOutputStream().flush();  
	 response.getOutputStream().close();
 }

}


