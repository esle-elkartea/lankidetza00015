package net.idtoki.adimde.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

import net.idtoki.adimde.manager.OperariosManager;
import net.idtoki.adimde.group.OperariosGroupBean;
import net.idtoki.adimde.helper.OperariosHelper;
import net.idtoki.adimde.model.OperariosPeer;
import net.idtoki.adimde.model.Operarios;

import net.idtoki.adimde.manager.PerfilesManager;
import net.idtoki.adimde.group.PerfilesGroupBean;
import net.idtoki.adimde.model.PerfilesPeer;
import net.idtoki.adimde.helper.PerfilesHelper;
import net.idtoki.adimde.manager.LocalidadesManager;
import net.idtoki.adimde.group.LocalidadesGroupBean;
import net.idtoki.adimde.model.LocalidadesPeer;
import net.idtoki.adimde.helper.LocalidadesHelper;

import net.idtoki.adimde.model.PartesPeer;

import net.idtoki.adimde.helper.PartesHelper;


import net.zylk.tools.ajax.AjaxUtils;
import net.zylk.tools.ajax.AjaxUtils.DinamicGridBean;
import net.zylk.tools.format.FormatUtils;
import net.zylk.tools.pdf.PdfUtils;
import net.zylk.tools.xml.XmlUtils;
import net.zylk.torque.TorqueUtils;
import net.zylk.web.WebUtils;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Mon Oct 02 10:34:00 CEST 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
 
 
public class OperariosController
    extends net.idtoki.adimde.controller.BaseOperariosController
{
 private static final Logger logger = Logger.getLogger("net.idtoki.adimde.controller.OperariosController");
 private TransformerFactory tFactory = TransformerFactory.newInstance();
 private Transformer operarios_transformer = null;  
 private Transformer operarioss_transformer = null;
 private Transformer operarios_produccion_transformer = null;

 public void init(ServletConfig config)
 {
	super.init();
	ResourceBundle resource = ResourceBundle.getBundle("net/idtoki/adimde/app/config/app-config");
	File operarios = new File(resource.getString("app.xsl.templates.dir")+"/PdfOperarios.xslt");
	Source xslSource = new StreamSource(operarios);
	File operarioss = new File(resource.getString("app.xsl.templates.dir")+"/PdfListaOperarios.xslt");
	Source xslSourceT = new StreamSource(operarioss); 	
	File operariosP = new File(resource.getString("app.xsl.templates.dir")+"/PdfOperariosProduccion.xslt");
	Source xslSourceP = new StreamSource(operariosP); 	
	try{
		operarios_transformer = tFactory.newTransformer(xslSource);
		operarioss_transformer = tFactory.newTransformer(xslSourceT);
		operarios_produccion_transformer = tFactory.newTransformer(xslSourceP);
	}catch (Exception e){
	  e.printStackTrace();
	}
 }


//Función para la inserción/actualización de registros

public void serviceAddOperarios(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 //Con esto se consigue transformar el request a UTF
	 //para temas de acentos y otros caracteres
	 utf8RequestService(request);

	 //recojo los parametros del formulario y doy de alta un nuevo elmento
	 try
	 {
		 Operarios elOperarios = OperariosHelper.createObj(request);
		 OperariosGroupBean gbOperarios = new OperariosGroupBean();
		 elOperarios.setFechaalta(FormatUtils.ddmmaaaa2aaaammdd(elOperarios.getFechaalta(),"-",""));
		 elOperarios.setFechabaja(FormatUtils.ddmmaaaa2aaaammdd(elOperarios.getFechabaja(),"-",""));
		 gbOperarios.setElemento(elOperarios);
		 gbOperarios.save();
	 }
	 catch(TorqueException te)
	 {
		 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	 }
 }


//Función para la eliminación de un registro
//este método invoca al método public void deleteOperarios(int idBorrar)
//definido en el OperariosManager
 public void serviceDeleteOperarios(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 int idBorrar=-1;
	 idBorrar=WebUtils.getintParam(request, "borrarId");
	 if (idBorrar!=-1)
 		 if (OperariosManager.borraOperarios(idBorrar))
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlOKResponse("ISO-8859-1"));
		 else
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlNotOKResponse("ISO-8859-1"));			 
 }


// Funciones para las ordenaciones y filtrados de información

 private Criteria ordenacion(Criteria c,String CampoOrdenacion,String OrdenOrdenacion) 
 { 
 	if((OrdenOrdenacion != null )&& (OrdenOrdenacion.compareTo("ASC")==0))
 		if ((CampoOrdenacion != null))
 		{
 			c.addAscendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	if  ((OrdenOrdenacion != null) && (OrdenOrdenacion.compareTo("DESC")==0))
 		if ((CampoOrdenacion != null))
		{
 			c.addDescendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	return c;
 }

private Criteria filtro(Criteria c,int filtro) 
{ 
	String cadena = null;
	 switch (filtro)
	 {
	 case 1:
		  //trabajadores en activo
		  c.add(OperariosPeer.FECHABAJA,(Object)cadena,Criteria.ISNULL);
		  break;
	 case 2:
		  //esto sería para trabajadores
		  //que están de baja  
		  c.add(OperariosPeer.FECHABAJA,(Object)cadena,Criteria.ISNOTNULL);
		  break;
	 default:
		 //caso por defecto
		 break;
	 }
	return c;
}

 public StringBuffer replaceStringBuffer (StringBuffer strBA, String strOrigen, String strDestino) 
 {
	 return new StringBuffer(strBA.toString().replaceAll(strOrigen,strDestino));
 }

 private Criteria criteriaOperariosTableContent(HttpServletRequest request,Criteria c) throws IOException, ServletException
 {
 	String param = "";	 
	 param =  WebUtils.getStringParam(request, new PerfilesHelper().getIdperfilName());
	 if(param != null)
		 TorqueUtils.addEqualCriteria(c,OperariosPeer.IDPERFIL,param);
	 param =  WebUtils.getStringParam(request, new LocalidadesHelper().getIdlocalidadName());
	 if(param != null)
		 TorqueUtils.addEqualCriteria(c,OperariosPeer.IDLOCALIDAD,param);
	  String paramSortCol =  WebUtils.getStringParam(request, "sort_col");
	  String paramSortDir =  WebUtils.getStringParam(request, "sort_dir");
	  int paramFiltro =  WebUtils.getintParam(request, "filtro");
	  c = ordenacion(c,paramSortCol,paramSortDir);
	  c = filtro(c,paramFiltro);

 	  return c;
 } 
 
 public String getPathElementOperarios(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
	 Criteria c= new Criteria();
	 String strPath = "";
	 int claveId=-1;
	 int claveFkId=-1;	 
	 claveId=WebUtils.getintParam(request, "operarios.IDOPERARIO");
	 if (claveId!=-1)
	 {
		c.add(OperariosPeer.IDOPERARIO, claveId);
		OperariosGroupBean trgb = OperariosManager.getOperarioss(c);							
		strPath = trgb.getOperarios(0).getPathOperariosParsed(request.getQueryString());
	 }
	 return "<path>" + strPath + "</path>";
 } 
 
 public String getPathTableContentOperarios(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
	 Criteria c= new Criteria();
	 String strPath = "";
	 int claveId=-1;	 
	 claveId=WebUtils.getintParam(request, "perfiles.IDPERFIL");
	 if(claveId != -1){
		 strPath = PerfilesManager.getPerfiles(claveId).getPathPerfilesParsed(request.getQueryString());
	 }		 	 
	 claveId=WebUtils.getintParam(request, "localidades.IDLOCALIDAD");
	 if(claveId != -1){
		 strPath = LocalidadesManager.getLocalidades(claveId).getPathLocalidadesParsed(request.getQueryString());
	 }		 	 
	 return "<path>" + strPath + "</path>";
 }  


public void  serviceOperariosTableContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
	 utf8RequestService(request);
	 int numElemPedidosBD = 40;
	 int gap = 0;//gap = viewedRows - numElemVisiblesUltPag	  
	 DinamicGridBean dgb = WebUtils.getDinamicGridBeanParam(request,numElemPedidosBD,gap); 
	 Criteria c =OperariosManager.buildSearchCriteria(dgb);
	 c =criteriaOperariosTableContent(request,c);	 
	 OperariosGroupBean cgb = OperariosManager.getOperarioss(c);
	 dgb.setTotalSize(cgb.getTotalSize());
	  
	 String[] methodos= new String[] {
		//OperariosHelper.IDPERFIL_GET_METHOD_NAME+"OperariosParsed"
		OperariosHelper.NIF_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.NOMBRE_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.APELLIDOUNO_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.APELLIDODOS_GET_METHOD_NAME+"OperariosParsed"
		//,OperariosHelper.FECHAALTA_GET_METHOD_NAME+"OperariosParsed"
		//,OperariosHelper.FECHABAJA_GET_METHOD_NAME+"OperariosParsed"
		//,OperariosHelper.NUMEROSS_GET_METHOD_NAME+"OperariosParsed"
		//,OperariosHelper.DIRECCION_GET_METHOD_NAME+"OperariosParsed"
		//,OperariosHelper.CP_GET_METHOD_NAME+"OperariosParsed"
		//,OperariosHelper.IDLOCALIDAD_GET_METHOD_NAME+"OperariosParsed"
		//,OperariosHelper.TELEFONO_GET_METHOD_NAME+"OperariosParsed"
		//,OperariosHelper.MOVIL_GET_METHOD_NAME+"OperariosParsed"
		//,OperariosHelper.EMAIL_GET_METHOD_NAME+"OperariosParsed"
		,"getHijosPartesOperarios"
		,"getEditOperarios"
		,"getDeleteOperarios"
	};
	 
	 StringBuffer cadena=null;
	 cadena = AjaxUtils.buildXmlAjaxResponseTableContentFromListObj(cgb.getAlmacen(),methodos,OperariosHelper.IDOPERARIO_GET_METHOD_NAME, dgb,"ISO-8859-1"); 
	 cadena.insert(cadena.indexOf("</ajax-response>"),"<response type='object' id='divPath'>" + getPathTableContentOperarios(request,response) + "</response>");
	 xmlResponseService(response,cadena); 
 }  

 public void serviceOperariosUlContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] methodos= new String[] {
	 		"getULContentOperariosParsed"
			 };
	 String param =  WebUtils.getStringParam(request, "value");
	 if(param==null || param.length() <= 0)
		 param =  WebUtils.getStringParam(request, new PartesHelper().getIdoperarioName());
	 	 
	 OperariosGroupBean mgb = OperariosManager.getOperarioss(OperariosManager.buildSearchCriteria(param));
	 simpleResponseService(response, AjaxUtils.buildAjaxULContentFromListObj(mgb.getAlmacen(),methodos, OperariosHelper.COMPLEX_ID_GET_METHOD,"Operarios"));
 } 



 public void serviceOperariosElement(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
  StringBuffer cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "operarios.IDOPERARIO");
  if (claveId!=-1)
  {
	  c.add(OperariosPeer.IDOPERARIO, claveId);
  }
  c.addAscendingOrderByColumn(OperariosPeer.IDOPERARIO);
  OperariosGroupBean trgb = OperariosManager.getOperarioss(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  String [] parametros={
		OperariosHelper.IDOPERARIO_GET_METHOD_NAME
		,OperariosHelper.IDPERFIL_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.NIF_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.NOMBRE_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.APELLIDOUNO_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.APELLIDODOS_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.FECHAALTA_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.FECHABAJA_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.NUMEROSS_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.DIRECCION_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.CP_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.IDLOCALIDAD_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.TELEFONO_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.MOVIL_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.EMAIL_GET_METHOD_NAME+"OperariosParsed"
	  };
	  cadena=trgb.buildXml(parametros,null,"ISO-8859-1");	
	  cadena.insert(cadena.indexOf("</result>"),getPathElementOperarios(request,response));  
  }
  xmlResponseService(response, cadena);
 } 
 

 protected StringBuffer updateIdoperarioResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getIdoperarioOperariosParsed());
 }  
 

 protected StringBuffer updateIdperfilResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getIdperfilOperariosParsed());
 }  
 

 protected StringBuffer updateNifResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getNifOperariosParsed());
 }  
 

 protected StringBuffer updateNombreResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getNombreOperariosParsed());
 }  
 

 protected StringBuffer updateApellidounoResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getApellidounoOperariosParsed());
 }  
 

 protected StringBuffer updateApellidodosResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getApellidodosOperariosParsed());
 }  
 

 protected StringBuffer updateFechaaltaResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getFechaaltaOperariosParsed());
 }  
 

 protected StringBuffer updateFechabajaResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getFechabajaOperariosParsed());
 }  
 

 protected StringBuffer updateNumerossResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getNumerossOperariosParsed());
 }  
 

 protected StringBuffer updateDireccionResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getDireccionOperariosParsed());
 }  
 

 protected StringBuffer updateCpResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getCpOperariosParsed());
 }  
 

 protected StringBuffer updateIdlocalidadResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getIdlocalidadOperariosParsed());
 }  
 

 protected StringBuffer updateTelefonoResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getTelefonoOperariosParsed());
 }  
 

 protected StringBuffer updateMovilResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getMovilOperariosParsed());
 }  
 

 protected StringBuffer updateEmailResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getEmailOperariosParsed());
 }  
 
 
 
 public void serviceOperariosPerfiles(HttpServletRequest request, HttpServletResponse response) throws IOException, TorqueException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "perfiles.IDPERFIL");
  if (claveId!=-1)
  {
	  c.add(PerfilesPeer.IDPERFIL, claveId);
  }
  c.addAscendingOrderByColumn(PerfilesPeer.IDPERFIL);
  PerfilesGroupBean trgb = PerfilesManager.getPerfiless(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><operarios.IDPERFIL>" + trgb.getPerfiles(0).getULContentPerfilesParsed()  + "</operarios.IDPERFIL></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }  
  			
 
 public void serviceOperariosLocalidades(HttpServletRequest request, HttpServletResponse response) throws IOException, TorqueException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "localidades.IDLOCALIDAD");
  if (claveId!=-1)
  {
	  c.add(LocalidadesPeer.IDLOCALIDAD, claveId);
  }
  c.addAscendingOrderByColumn(LocalidadesPeer.IDLOCALIDAD);
  LocalidadesGroupBean trgb = LocalidadesManager.getLocalidadess(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><operarios.IDLOCALIDAD>" + trgb.getLocalidades(0).getULContentLocalidadesParsed()  + "</operarios.IDLOCALIDAD></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }  
  			

 public void serviceGetOperariosDetallePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
		OperariosHelper.IDOPERARIO_GET_METHOD_NAME
		,OperariosHelper.IDPERFIL_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.NIF_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.NOMBRE_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.APELLIDOUNO_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.APELLIDODOS_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.FECHAALTA_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.FECHABAJA_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.NUMEROSS_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.DIRECCION_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.CP_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.IDLOCALIDAD_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.TELEFONO_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.MOVIL_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.EMAIL_GET_METHOD_NAME+"OperariosParsed"
			 };
	  
	 
	 OperariosGroupBean tgb = new OperariosGroupBean();
	 try
	{
		tgb.setElemento(OperariosHelper.getOperarios(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, null,"ISO-8859-1"),"n/a"," "), operarios_transformer,"ISO-8859-1");
	 response.addHeader("content-disposition","attachment;filename=Operarios.pdf");
	 response.setContentType("application/pdf");
	 response.setHeader("Cache-Control", "");//para que funcione en IE
	 response.setContentLength(content.length);
	 response.getOutputStream().write(content);
	 response.getOutputStream().flush();  
	 response.getOutputStream().close();
	
 }  

 public void serviceOperariosTableContentPdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  	utf8RequestService(request);
  	Criteria c= new Criteria();
  	String paramQuery =  WebUtils.getStringParam(request, "query");
  	if ((paramQuery != null)&& (paramQuery.compareTo("")!=0) )
		c = OperariosManager.buildSearchCriteria(paramQuery);   
  	c =criteriaOperariosTableContent(request,c);	  
  	OperariosGroupBean tgb = OperariosManager.getOperarioss(c);
  
  	String[] methodos= new String[] {	
		OperariosHelper.IDPERFIL_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.NIF_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.NOMBRE_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.APELLIDOUNO_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.APELLIDODOS_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.FECHAALTA_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.FECHABAJA_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.NUMEROSS_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.DIRECCION_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.CP_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.IDLOCALIDAD_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.TELEFONO_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.MOVIL_GET_METHOD_NAME+"OperariosParsed"
		,OperariosHelper.EMAIL_GET_METHOD_NAME+"OperariosParsed"
			};
  
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(methodos, null,"ISO-8859-1"),"n/a"," "), operarioss_transformer,"ISO-8859-1");
	 response.addHeader("content-disposition","attachment;filename=ListaOperarios.pdf");
	 response.setContentType("application/pdf");
	 response.setHeader("Cache-Control", "");//para que funcione en IE
	 response.setContentLength(content.length);
	 response.getOutputStream().write(content);
	 response.getOutputStream().flush();  
	 response.getOutputStream().close();
 }
 
 public void serviceGetOperariosProduccionPdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  	utf8RequestService(request);
  	
  	String[] methodos= new String[] {	
		"getIdpartePartesParsed"
		,"getHorasPartesParsed"
		,"getProduccionPartesParsed"
			};
  	
  	String[] getMetodosHijos = new String[] {"getPartess2"};//getXXXXXXs
  
	 OperariosGroupBean tgb = new OperariosGroupBean();
	 try
	{
		 Operarios elOperarios = OperariosHelper.getOperarios(request);
		 String paramFecha1 =  FormatUtils.ddmmaaaa2aaaammdd(WebUtils.getStringParam(request, "fecha1"),"-","");
		 if ((paramFecha1 != null)&& (paramFecha1.compareTo("")!=0) )
			 elOperarios.setFecha1(paramFecha1);
		 String paramFecha2 =  FormatUtils.ddmmaaaa2aaaammdd(WebUtils.getStringParam(request, "fecha2"),"-","");
		 if ((paramFecha2 != null)&& (paramFecha2.compareTo("")!=0) )
			 elOperarios.setFecha2(paramFecha2);
		 tgb.setElemento(elOperarios);
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}  	

	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(methodos, getMetodosHijos,"ISO-8859-1"),"n/a"," "), operarios_produccion_transformer,"ISO-8859-1");
	 response.addHeader("content-disposition","attachment;filename=OperariosProduccion.pdf");
	 response.setContentType("application/pdf");
	 response.setHeader("Cache-Control", "");//para que funcione en IE
	 response.setContentLength(content.length);
	 response.getOutputStream().write(content);
	 response.getOutputStream().flush();  
	 response.getOutputStream().close();
 } 

}


