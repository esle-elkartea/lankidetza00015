package net.idtoki.adimde.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

import net.idtoki.adimde.manager.ProduccionesManager;
import net.idtoki.adimde.group.ProduccionesGroupBean;
import net.idtoki.adimde.helper.ProduccionesHelper;
import net.idtoki.adimde.model.ProduccionesPeer;
import net.idtoki.adimde.model.Producciones;

import net.idtoki.adimde.manager.TipotrabajosManager;
import net.idtoki.adimde.group.TipotrabajosGroupBean;
import net.idtoki.adimde.model.TipotrabajosPeer;
import net.idtoki.adimde.helper.TipotrabajosHelper;
import net.idtoki.adimde.manager.EstadosproduccionManager;
import net.idtoki.adimde.group.EstadosproduccionGroupBean;
import net.idtoki.adimde.model.EstadosproduccionPeer;
import net.idtoki.adimde.helper.EstadosproduccionHelper;
import net.idtoki.adimde.manager.CentrosManager;
import net.idtoki.adimde.group.CentrosGroupBean;
import net.idtoki.adimde.model.CentrosPeer;
import net.idtoki.adimde.helper.CentrosHelper;

import net.idtoki.adimde.helper.ProductosHelper;


import net.zylk.tools.ajax.AjaxUtils;
import net.zylk.tools.ajax.AjaxUtils.DinamicGridBean;
import net.zylk.tools.format.FormatUtils;
import net.zylk.tools.pdf.PdfUtils;
import net.zylk.tools.xml.XmlUtils;
import net.zylk.torque.TorqueUtils;
import net.zylk.web.WebUtils;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Thu Oct 26 17:10:22 CEST 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
 
 
public class ProduccionesController
    extends net.idtoki.adimde.controller.BaseProduccionesController
{
 private static final Logger logger = Logger.getLogger("net.idtoki.adimde.controller.ProduccionesController");
 private TransformerFactory tFactory = TransformerFactory.newInstance();
 private Transformer producciones_transformer = null;  
 private Transformer produccioness_transformer = null; 

 public void init(ServletConfig config)
 {
	super.init();
	ResourceBundle resource = ResourceBundle.getBundle("net/idtoki/adimde/app/config/app-config");
	File producciones = new File(resource.getString("app.xsl.templates.dir")+"/PdfProducciones.xslt");
	Source xslSource = new StreamSource(producciones);
	File produccioness = new File(resource.getString("app.xsl.templates.dir")+"/PdfListaProducciones.xslt");
	Source xslSourceT = new StreamSource(produccioness); 	  
	try{
		producciones_transformer = tFactory.newTransformer(xslSource);
		produccioness_transformer = tFactory.newTransformer(xslSourceT);			  
	}catch (Exception e){
	  e.printStackTrace();
	}
 }


//Función para la inserción/actualización de registros

public void serviceAddProducciones(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 //Con esto se consigue transformar el request a UTF
	 //para temas de acentos y otros caracteres
	 utf8RequestService(request);

	 //recojo los parametros del formulario y doy de alta un nuevo elmento
	 try
	 {
		 Producciones elProducciones = ProduccionesHelper.createObj(request);
		 ProduccionesGroupBean gbProducciones = new ProduccionesGroupBean();
		 elProducciones.setFechainicio(FormatUtils.ddmmaaaa2aaaammdd(elProducciones.getFechainicio(),"-",""));
		 elProducciones.setFechafin(FormatUtils.ddmmaaaa2aaaammdd(elProducciones.getFechafin(),"-",""));
		 gbProducciones.setElemento(elProducciones);
		 gbProducciones.save();
	 }
	 catch(TorqueException te)
	 {
		 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	 }
 }


//Función para la eliminación de un registro
//este método invoca al método public void deleteProducciones(int idBorrar)
//definido en el ProduccionesManager
 public void serviceDeleteProducciones(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 int idBorrar=-1;
	 idBorrar=WebUtils.getintParam(request, "borrarId");
	 if (idBorrar!=-1)
 		 if (ProduccionesManager.borraProducciones(idBorrar))
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlOKResponse("ISO-8859-1"));
		 else
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlNotOKResponse("ISO-8859-1"));			 
 }


// Funciones para las ordenaciones y filtrados de información

 private Criteria ordenacion(Criteria c,String CampoOrdenacion,String OrdenOrdenacion) 
 { 
 	if((OrdenOrdenacion != null )&& (OrdenOrdenacion.compareTo("ASC")==0))
 		if ((CampoOrdenacion != null))
 		{
 			c.addAscendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	if  ((OrdenOrdenacion != null) && (OrdenOrdenacion.compareTo("DESC")==0))
 		if ((CampoOrdenacion != null))
		{
 			c.addDescendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	return c;
 }

private Criteria filtro(Criteria c,int filtro) 
{ 
	String cadena = null;
	 switch (filtro)
	 {
	 case 1:
		  //Caso uno de Filtrado Estado de producción EN EJECUCIÓN
		  //c.add(Campo,valor);
		 c.add(ProduccionesPeer.IDESTADOPRODUCCION,1);
		  break;
	 case 2:
		  //Caso dos de Filtrado Estado de producción FINALIZADO
		  //c.add(Campo,valor);
		 c.add(ProduccionesPeer.IDESTADOPRODUCCION,2);
		 break;
	 default:
		 //caso por defecto
		 break;
	 }
	return c;
}

 public StringBuffer replaceStringBuffer (StringBuffer strBA, String strOrigen, String strDestino) 
 {
	 return new StringBuffer(strBA.toString().replaceAll(strOrigen,strDestino));
 }

 private Criteria criteriaProduccionesTableContent(HttpServletRequest request,Criteria c) throws IOException, ServletException
 {
 	String param = "";	 
	 param =  WebUtils.getStringParam(request, new TipotrabajosHelper().getIdtipotrabajoName());
	 if(param != null)
		 TorqueUtils.addEqualCriteria(c,ProduccionesPeer.IDTIPOTRABAJO,param);
	 param =  WebUtils.getStringParam(request, new EstadosproduccionHelper().getIdestadoproduccionName());
	 if(param != null)
		 TorqueUtils.addEqualCriteria(c,ProduccionesPeer.IDESTADOPRODUCCION,param);
	 param =  WebUtils.getStringParam(request, new CentrosHelper().getIdcentroName());
	 if(param != null)
		 TorqueUtils.addEqualCriteria(c,ProduccionesPeer.IDCENTRO,param);
	  String paramSortCol =  WebUtils.getStringParam(request, "sort_col");
	  String paramSortDir =  WebUtils.getStringParam(request, "sort_dir");
	  int paramFiltro =  WebUtils.getintParam(request, "filtro");
	  c = ordenacion(c,paramSortCol,paramSortDir);
	  c = filtro(c,paramFiltro);

 	  return c;
 } 
 
 public String getPathElementProducciones(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
	 Criteria c= new Criteria();
	 String strPath = "";
	 int claveId=-1;
	 int claveFkId=-1;	 
	 claveId=WebUtils.getintParam(request, "producciones.IDPRODUCCION");
	 if (claveId!=-1)
	 {
		c.add(ProduccionesPeer.IDPRODUCCION, claveId);
		ProduccionesGroupBean trgb = ProduccionesManager.getProduccioness(c);							
		strPath = trgb.getProducciones(0).getPathProduccionesParsed(request.getQueryString());
	 }
	 return "<path>" + strPath + "</path>";
 } 
 
 public String getPathTableContentProducciones(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
	 Criteria c= new Criteria();
	 String strPath = "";
	 int claveId=-1;	 
	 claveId=WebUtils.getintParam(request, "tipotrabajos.IDTIPOTRABAJO");
	 if(claveId != -1){
		 strPath = TipotrabajosManager.getTipotrabajos(claveId).getPathTipotrabajosParsed(request.getQueryString());
	 }		 	 
	 claveId=WebUtils.getintParam(request, "estadosproduccion.IDESTADOPRODUCCION");
	 if(claveId != -1){
		 strPath = EstadosproduccionManager.getEstadosproduccion(claveId).getPathEstadosproduccionParsed(request.getQueryString());
	 }		 	 
	 claveId=WebUtils.getintParam(request, "centros.IDCENTRO");
	 if(claveId != -1){
		 strPath = CentrosManager.getCentros(claveId).getPathCentrosParsed(request.getQueryString());
	 }		 	 
	 return "<path>" + strPath + "</path>";
 }  


public void  serviceProduccionesTableContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
	 utf8RequestService(request);
	 int numElemPedidosBD = 40;
	 int gap = 0;//gap = viewedRows - numElemVisiblesUltPag	  
	 DinamicGridBean dgb = WebUtils.getDinamicGridBeanParam(request,numElemPedidosBD,gap); 
	 Criteria c =ProduccionesManager.buildSearchCriteria(dgb);
	 c =criteriaProduccionesTableContent(request,c);	 
	 ProduccionesGroupBean cgb = ProduccionesManager.getProduccioness(c);
	 dgb.setTotalSize(cgb.getTotalSize());
	  
	 String[] methodos= new String[] {
		ProduccionesHelper.FECHAINICIO_GET_METHOD_NAME+"ProduccionesParsed"
		,ProduccionesHelper.FECHAFIN_GET_METHOD_NAME+"ProduccionesParsed"
		,ProduccionesHelper.IDTIPOTRABAJO_GET_METHOD_NAME+"ProduccionesParsed"
		,ProduccionesHelper.IDESTADOPRODUCCION_GET_METHOD_NAME+"ProduccionesParsed"
		,ProduccionesHelper.IDCENTRO_GET_METHOD_NAME+"ProduccionesParsed"
		,"getHijosProductosProducciones"
		,"getEditProducciones"
		,"getDeleteProducciones"
	};
	 
	 StringBuffer cadena=null;
	 cadena = AjaxUtils.buildXmlAjaxResponseTableContentFromListObj(cgb.getAlmacen(),methodos,ProduccionesHelper.IDPRODUCCION_GET_METHOD_NAME, dgb,"ISO-8859-1"); 
	 cadena.insert(cadena.indexOf("</ajax-response>"),"<response type='object' id='divPath'>" + getPathTableContentProducciones(request,response) + "</response>");
	 xmlResponseService(response,cadena); 
 }  

 public void serviceProduccionesUlContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] methodos= new String[] {
	 		"getULContentProduccionesParsed"
			 };
	 String param =  WebUtils.getStringParam(request, "value");
	 if(param==null || param.length() <= 0)
		 param =  WebUtils.getStringParam(request, new ProductosHelper().getIdproduccionName());
	 	 
	 ProduccionesGroupBean mgb = ProduccionesManager.getProduccioness(ProduccionesManager.buildSearchCriteria(param));
	 simpleResponseService(response, AjaxUtils.buildAjaxULContentFromListObj(mgb.getAlmacen(),methodos, ProduccionesHelper.COMPLEX_ID_GET_METHOD,"Producciones"));
 } 



 public void serviceProduccionesElement(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
  StringBuffer cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "producciones.IDPRODUCCION");
  if (claveId!=-1)
  {
	  c.add(ProduccionesPeer.IDPRODUCCION, claveId);
  }
  c.addAscendingOrderByColumn(ProduccionesPeer.IDPRODUCCION);
  ProduccionesGroupBean trgb = ProduccionesManager.getProduccioness(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  String [] parametros={
		ProduccionesHelper.IDPRODUCCION_GET_METHOD_NAME
		,ProduccionesHelper.FECHAINICIO_GET_METHOD_NAME+"ProduccionesParsed"
		,ProduccionesHelper.FECHAFIN_GET_METHOD_NAME+"ProduccionesParsed"
		,ProduccionesHelper.IDTIPOTRABAJO_GET_METHOD_NAME+"ProduccionesParsed"
		,ProduccionesHelper.IDESTADOPRODUCCION_GET_METHOD_NAME+"ProduccionesParsed"
		,ProduccionesHelper.IDCENTRO_GET_METHOD_NAME+"ProduccionesParsed"
		,"getCosteMaterialesProduccionesParsed"
		,"getManoObraProduccionesParsed"
	  };
	  cadena=trgb.buildXml(parametros,null,"ISO-8859-1");	
	  cadena.insert(cadena.indexOf("</result>"),getPathElementProducciones(request,response));  
  }
  xmlResponseService(response, cadena);
 } 
 

 protected StringBuffer updateIdproduccionResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(ProduccionesManager.getProducciones(Integer.parseInt(a.get(0).toString())).getIdproduccionProduccionesParsed());
 }  
 

 protected StringBuffer updateFechainicioResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(ProduccionesManager.getProducciones(Integer.parseInt(a.get(0).toString())).getFechainicioProduccionesParsed());
 }  
 

 protected StringBuffer updateFechafinResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(ProduccionesManager.getProducciones(Integer.parseInt(a.get(0).toString())).getFechafinProduccionesParsed());
 }  
 

 protected StringBuffer updateIdtipotrabajoResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(ProduccionesManager.getProducciones(Integer.parseInt(a.get(0).toString())).getIdtipotrabajoProduccionesParsed());
 }  
 

 protected StringBuffer updateIdestadoproduccionResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(ProduccionesManager.getProducciones(Integer.parseInt(a.get(0).toString())).getIdestadoproduccionProduccionesParsed());
 }  
 

 protected StringBuffer updateIdcentroResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(ProduccionesManager.getProducciones(Integer.parseInt(a.get(0).toString())).getIdcentroProduccionesParsed());
 }  
 
 
 
 public void serviceProduccionesTipotrabajos(HttpServletRequest request, HttpServletResponse response) throws IOException, TorqueException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "tipotrabajos.IDTIPOTRABAJO");
  if (claveId!=-1)
  {
	  c.add(TipotrabajosPeer.IDTIPOTRABAJO, claveId);
  }
  c.addAscendingOrderByColumn(TipotrabajosPeer.IDTIPOTRABAJO);
  TipotrabajosGroupBean trgb = TipotrabajosManager.getTipotrabajoss(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><producciones.IDTIPOTRABAJO>" + trgb.getTipotrabajos(0).getULContentTipotrabajosParsed()  + "</producciones.IDTIPOTRABAJO></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }  
  			
 
 public void serviceProduccionesEstadosproduccion(HttpServletRequest request, HttpServletResponse response) throws IOException, TorqueException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "estadosproduccion.IDESTADOPRODUCCION");
  if (claveId!=-1)
  {
	  c.add(EstadosproduccionPeer.IDESTADOPRODUCCION, claveId);
  }
  c.addAscendingOrderByColumn(EstadosproduccionPeer.IDESTADOPRODUCCION);
  EstadosproduccionGroupBean trgb = EstadosproduccionManager.getEstadosproduccions(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><producciones.IDESTADOPRODUCCION>" + trgb.getEstadosproduccion(0).getULContentEstadosproduccionParsed()  + "</producciones.IDESTADOPRODUCCION></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }  
  			
 
 public void serviceProduccionesCentros(HttpServletRequest request, HttpServletResponse response) throws IOException, TorqueException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "centros.IDCENTRO");
  if (claveId!=-1)
  {
	  c.add(CentrosPeer.IDCENTRO, claveId);
  }
  c.addAscendingOrderByColumn(CentrosPeer.IDCENTRO);
  CentrosGroupBean trgb = CentrosManager.getCentross(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><producciones.IDCENTRO>" + trgb.getCentros(0).getULContentCentrosParsed()  + "</producciones.IDCENTRO></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }  
  			

 public void serviceGetProduccionesDetallePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
		ProduccionesHelper.IDPRODUCCION_GET_METHOD_NAME
		,ProduccionesHelper.FECHAINICIO_GET_METHOD_NAME+"ProduccionesParsed"
		,ProduccionesHelper.FECHAFIN_GET_METHOD_NAME+"ProduccionesParsed"
		,ProduccionesHelper.IDTIPOTRABAJO_GET_METHOD_NAME+"ProduccionesParsed"
		,ProduccionesHelper.IDESTADOPRODUCCION_GET_METHOD_NAME+"ProduccionesParsed"
		,ProduccionesHelper.IDCENTRO_GET_METHOD_NAME+"ProduccionesParsed"
		,"getCosteMaterialesProduccionesParsed"
		,"getManoObraProduccionesParsed"		
			 };
	  
	 
	 ProduccionesGroupBean tgb = new ProduccionesGroupBean();
	 try
	{
		tgb.setElemento(ProduccionesHelper.getProducciones(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, null,"ISO-8859-1"),"n/a"," "), producciones_transformer,"ISO-8859-1");
	 response.addHeader("content-disposition","attachment;filename=Producciones.pdf");
	 response.setContentType("application/pdf");
	 response.setHeader("Cache-Control", "");//para que funcione en IE
	 response.setContentLength(content.length);
	 response.getOutputStream().write(content);
	 response.getOutputStream().flush();  
	 response.getOutputStream().close();
	
 }  

 public void serviceProduccionesTableContentPdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  	utf8RequestService(request);
  	Criteria c= new Criteria();
  	String paramQuery =  WebUtils.getStringParam(request, "query");
  	if ((paramQuery != null)&& (paramQuery.compareTo("")!=0) )
		c = ProduccionesManager.buildSearchCriteria(paramQuery);   
  	c =criteriaProduccionesTableContent(request,c);	  
  	ProduccionesGroupBean tgb = ProduccionesManager.getProduccioness(c);
  
  	String[] methodos= new String[] {	
		ProduccionesHelper.FECHAINICIO_GET_METHOD_NAME+"ProduccionesParsed"
		,ProduccionesHelper.FECHAFIN_GET_METHOD_NAME+"ProduccionesParsed"
		,ProduccionesHelper.IDTIPOTRABAJO_GET_METHOD_NAME+"ProduccionesParsed"
		,ProduccionesHelper.IDESTADOPRODUCCION_GET_METHOD_NAME+"ProduccionesParsed"
		,ProduccionesHelper.IDCENTRO_GET_METHOD_NAME+"ProduccionesParsed"
			};
  
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(methodos, null,"ISO-8859-1"),"n/a"," "), produccioness_transformer,"ISO-8859-1");
	 response.addHeader("content-disposition","attachment;filename=ListaProducciones.pdf");
	 response.setContentType("application/pdf");
	 response.setHeader("Cache-Control", "");//para que funcione en IE
	 response.setContentLength(content.length);
	 response.getOutputStream().write(content);
	 response.getOutputStream().flush();  
	 response.getOutputStream().close();
 }

}


